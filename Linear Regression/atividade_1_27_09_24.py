# -*- coding: utf-8 -*-
"""Atividade_1_27-09-2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fzl4LTFz3I-Z5NSHejEyCw-FrW9dxMde

# Definição do problema

### Criar uma regressão linear para estimar a velocidade de rotação do eixo de um motor a partir do sinal de controle PWM. A base de dados possui duas colunas: PWM e velocidade [rotações por minutos].

# Código

### Importando base de dados em formato de csv. Aqui se usa a biblioteca pandas.
"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/ect-comp/ml/refs/heads/master/dados/PWMxVelocidade.csv')

df.head()

"""### Armazenando os vetores 'PWM' e 'Velocidade' nas variáveis X e y."""

X = df[['PWM']].values
y = df[['Velocidade']].values

"""### Uso da biblioteca sklearn. Cria-se um objeto 'modelo' para fazer a regressão linear e, a partir dele, obtém-se os coeficientes angular e linear."""

from sklearn.linear_model import LinearRegression

modelo = LinearRegression()

modelo.fit(X, y)

print('Coeficiente angular: ', modelo.coef_[0])
print('Coeficiente linear: ', modelo.intercept_)

"""### Criando gráfico de dispersão com a biblioteca matplotlib"""

import matplotlib.pyplot as plt

plt.scatter(X, y)
plt.xlabel('Sinal de controle PWM')
plt.ylabel('Velocidade de rotação [RPM]')
plt.title('Velocidade de rotação x Sinal PWM')
plt.show()

"""### Criando gráfico de dispersão com a reta gerada pelo modelo de regressão linear."""

y_pred = modelo.predict(X)

plt.scatter(X, y)
plt.xlabel('Sinal de controle PWM')
plt.ylabel('Velocidade de rotação [RPM]')
plt.title('Velocidade de rotação X Sinal PWM')

plt.plot(X, y_pred, color='red')
plt.show()

"""### Calculando a métrica R²:"""

from sklearn.metrics import r2_score

# Calcula o R²
r2 = r2_score(y, y_pred)

print(f"R²: {r2}")