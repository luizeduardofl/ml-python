# -*- coding: utf-8 -*-
"""Atividade_4_23-10-24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zUll1ET3yZorljB3WzRTNM_e2T-uFGpv

## Base de dados Titanic
"""

import seaborn as sns

tit = sns.load_dataset('titanic')
tit.head(10)

"""## Filtragem dos dados"""

import pandas as pd
import numpy as np

tit = sns.load_dataset('titanic')

# Conversão dos dados de 'alone' para números (0 e 1)
tit['alone'] = tit['alone'].astype(int)

# Conversão dos dados de 'who' para números (0, 1 e 2)
tit['who'] = tit['who'].map({'man': 0, 'woman': 1, 'child': 2})

# Remoção das linhas com valores 'NaN' na coluna 'age'
tit.dropna(subset=['age'], inplace=True)

X = tit[['age', 'sibsp', 'parch', 'pclass', 'who', 'alone']].values
y = tit[['survived']].values

print(X.shape)
print(y.shape)

tit.head(10)

print(X[:5])

print(y[:5])

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

print("Tamanho de X_train:", X_train.shape)
print("Tamanho de X_test:", X_test.shape)
print("Tamanho de y_train:", y_train.shape)
print("Tamanho de y_test:", y_test.shape)

"""## Treinamento com SVM com kernel linear"""

from sklearn.svm import SVC

classifier_svm = SVC(kernel='linear', random_state=0)

classifier_svm.fit(X_train, y_train)

"""## Medição da acurácia e matriz de confusão"""

# prompt: Faça a avaliação do modelo calculando a acurácia e a matriz de confusão

from sklearn.metrics import confusion_matrix, accuracy_score

# Predizendo as classes dos dados de teste
y_pred = classifier_svm.predict(X_test)

# Calculando a acurácia do modelo
accuracy = accuracy_score(y_test, y_pred)
print("Acurácia do modelo:", accuracy)

# Calculando a matriz de confusão do modelo
conf_matrix = confusion_matrix(y_test, y_pred)
print("Matriz de confusão:")
print(conf_matrix)