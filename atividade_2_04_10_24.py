# -*- coding: utf-8 -*-
"""Atividade_2_04-10-24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sZgp1MZz0HPi9HjSu7NcZKOi0dKMn4Wk

## Situação-problema: base de dados Iris
* Classificação com árvore de decisão
* Prever a espécie de uma dada flor: Iris-setosa, Iris-versicolor ou Iris-virginica.
"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/ect-comp/ml/refs/heads/master/dados/Iris.csv')

df

"""## Atributos
* Entrada:
  * Comprimento da sépala;
  * Largura da sépala;
  * Comprimento da pétala;
  * Largura da pétala.
* Saída:
  * Se a espécie é Iris-setosa, Iris-versicolor ou Iris-virginica.
"""

X = df[['SepalLengthCm',	'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']].to_numpy()
print(X[:5])

y = df[['Species']].to_numpy()
print(y[:5])

"""## Divisão dos conjuntos de dados (treinamento e teste)
* 25% dos dados são reservados para treinamento, e 75% para teste.
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)

print(f"X_train shape: {X_train.shape}")
print(f"y_train shape: {y_train.shape}")
print(f"X_test shape: {X_test.shape}")
print(f"y_test shape: {y_test.shape}")

"""## Treinamento
* Árvore de decisão com profundidade máxima de 3.
"""

# Treinando uma árvore de decisão com profundidade máxima de 3 e use como critério de seleção de atributos a entropia. Use a biblioteca 'sklearn'.

from sklearn.tree import DecisionTreeClassifier

# Criando um classificador de árvore de decisão com profundidade máxima de 3 e critério de seleção de atributos baseado em entropia
clf = DecisionTreeClassifier(max_depth=3, criterion='entropy')

# Treinando o classificador com os dados de treinamento
clf.fit(X_train, y_train)

"""## Diagrama da árvore treinada"""

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.style.use('ggplot')

plt.figure(figsize=(10, 8))
plot_tree(clf, feature_names=['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm'], class_names=['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'], filled=True)
plt.show()

"""## Avaliação (acurácia e matriz de confusão)"""

from sklearn.metrics import accuracy_score, confusion_matrix

# Fazer previsões nos dados de teste
y_pred = clf.predict(X_test)

# Calcular a acurácia
accuracy = accuracy_score(y_test, y_pred)
print(f"Acurácia: {accuracy}")

# Calcular a matriz de confusão
confusion_matrix = confusion_matrix(y_test, y_pred)
print(f"Matriz de confusão:\n{confusion_matrix}")

# prompt: Imprima a matriz de confusão deste problema com uma figura rica em cores

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'],
            yticklabels=['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'])
plt.xlabel('Previsto')
plt.ylabel('Real')
plt.title('Matriz de Confusão')
plt.show()